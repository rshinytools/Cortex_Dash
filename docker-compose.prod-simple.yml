# ABOUTME: Simplified production Docker Compose without SSL for initial testing
# ABOUTME: Use this for testing on VM before setting up domain and SSL

version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: cortex_postgres
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-changethis}
      - POSTGRES_DB=${POSTGRES_DB:-clinical_dashboard}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Redis Cache and Message Broker
  redis:
    image: redis:7-alpine
    container_name: cortex_redis
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Backend - FastAPI Application
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: cortex_backend
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - ENVIRONMENT=production
      - PROJECT_NAME=Cortex Clinical Dashboard
      - BACKEND_CORS_ORIGINS=http://*:3000,http://localhost:3000
      - FRONTEND_HOST=http://localhost:3000
      - POSTGRES_SERVER=postgres
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-changethis}
      - POSTGRES_DB=${POSTGRES_DB:-clinical_dashboard}
      - REDIS_URL=redis://redis:6379/0
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_DB=0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-here-change-in-production}
      - ENCRYPTION_KEY=lfNDmT0NurPGZuiEalqfLmjwqgQcyYh-I05AoVJ6uMo=
      - FIRST_SUPERUSER=${FIRST_SUPERUSER:-admin@sagarmatha.ai}
      - FIRST_SUPERUSER_PASSWORD=${FIRST_SUPERUSER_PASSWORD:-adadad123}
      - EMAILS_FROM_EMAIL=${EMAILS_FROM_EMAIL:-noreply@sagarmatha.ai}
      - DATA_PATH=/data
    volumes:
      - ./data:/data
      - ./logs/backend:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/utils/health-check/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  # Frontend - Next.js Application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: cortex_frontend
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=http://localhost:8000
      - NEXTAUTH_URL=http://localhost:3000
      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET:-your-secret-key-here-change-in-production}
      - API_URL_INTERNAL=http://backend:8000
    depends_on:
      backend:
        condition: service_healthy
    restart: unless-stopped

  # Celery Worker
  celery-worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: cortex_celery_worker
    command: ["celery", "-A", "app.core.celery_app", "worker", "--loglevel=info"]
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - ENVIRONMENT=production
      - PROJECT_NAME=Cortex Clinical Dashboard
      - POSTGRES_SERVER=postgres
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-changethis}
      - POSTGRES_DB=${POSTGRES_DB:-clinical_dashboard}
      - REDIS_URL=redis://redis:6379/0
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_DB=0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-here-change-in-production}
      - ENCRYPTION_KEY=lfNDmT0NurPGZuiEalqfLmjwqgQcyYh-I05AoVJ6uMo=
      - DATA_PATH=/data
    volumes:
      - ./data:/data
      - ./logs/celery:/app/logs
    restart: unless-stopped

  # Celery Beat Scheduler
  celery-beat:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: cortex_celery_beat
    command: ["celery", "-A", "app.core.celery_app", "beat", "--loglevel=info"]
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - ENVIRONMENT=production
      - PROJECT_NAME=Cortex Clinical Dashboard
      - POSTGRES_SERVER=postgres
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-changethis}
      - POSTGRES_DB=${POSTGRES_DB:-clinical_dashboard}
      - REDIS_URL=redis://redis:6379/0
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_DB=0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-here-change-in-production}
      - ENCRYPTION_KEY=lfNDmT0NurPGZuiEalqfLmjwqgQcyYh-I05AoVJ6uMo=
    volumes:
      - ./logs/celery-beat:/app/logs
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data: