[pytest]
# Minimum pytest version required
minversion = 7.0

# Test discovery patterns
testpaths = tests
python_files = test_*.py
python_classes = Test*
python_functions = test_*

# Test markers for categorization
markers =
    unit: Unit tests for individual components
    integration: Integration tests for component interactions
    compliance: Compliance-specific tests (21 CFR Part 11, HIPAA)
    performance: Performance and load tests
    e2e: End-to-end workflow tests
    smoke: Quick smoke tests for CI/CD
    critical: Critical functionality that must pass
    async: Asynchronous operation tests
    phase1: Phase 1 Foundation tests
    phase2: Phase 2 RBAC tests
    phase3: Phase 3 Data Pipeline tests
    phase4: Phase 4 Export System tests
    phase5: Phase 5 Configuration tests
    phase6: Phase 6 Dashboard tests
    phase7: Phase 7 Admin Panel tests
    phase8: Phase 8 Security tests
    phase9: Phase 9 Deployment tests

# Test execution options
addopts = 
    # Verbosity and output
    --verbose
    --strict-markers
    --tb=short
    --capture=no
    
    # Coverage reporting
    --cov=app
    --cov-report=html:Reports/coverage
    --cov-report=term-missing
    --cov-report=json:Reports/coverage.json
    --cov-fail-under=80
    
    # HTML report generation
    --html=Reports/latest/test_report.html
    --self-contained-html
    
    # JUnit XML for CI/CD
    --junit-xml=Reports/junit.xml
    
    # Performance tracking
    --durations=20
    
    # Parallel execution (adjust based on system)
    -n auto

# Async configuration
asyncio_mode = auto

# Logging configuration
log_cli = true
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)s] %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

# Timeout settings
timeout = 300
timeout_method = thread

# Coverage settings
[coverage:run]
source = app
omit = 
    */tests/*
    */migrations/*
    */__pycache__/*
    */venv/*

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    raise AssertionError
    raise NotImplementedError
    if __name__ == .__main__.:
    if TYPE_CHECKING:

[coverage:html]
directory = Reports/coverage

# Test output settings
[tool:pytest]
junit_family = xunit2
junit_logging = all
junit_log_passing_tests = true