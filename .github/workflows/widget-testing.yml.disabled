name: Widget System Testing

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'backend/app/services/widget_data_executor.py'
      - 'backend/app/services/export_service.py'
      - 'backend/app/services/template_*.py'
      - 'backend/app/api/v1/endpoints/widgets.py'
      - 'backend/app/models/widget.py'
      - 'backend/app/models/dashboard.py'
      - 'frontend/src/components/widgets/**'
      - 'frontend/src/components/admin/unified-dashboard-designer/**'
      - 'tests/**'
      - '.github/workflows/widget-testing.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'backend/app/services/widget_data_executor.py'
      - 'backend/app/services/export_service.py'
      - 'backend/app/services/template_*.py'
      - 'backend/app/api/v1/endpoints/widgets.py'
      - 'backend/app/models/widget.py'
      - 'backend/app/models/dashboard.py'
      - 'frontend/src/components/widgets/**'
      - 'frontend/src/components/admin/unified-dashboard-designer/**'
      - 'tests/**'
      - '.github/workflows/widget-testing.yml'

env:
  POSTGRES_SERVER: localhost
  POSTGRES_PORT: 5432
  POSTGRES_DB: cortex_test
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: postgres
  REDIS_URL: redis://localhost:6379
  SECRET_KEY: test-secret-key-for-ci
  FIRST_SUPERUSER: admin@test.com
  FIRST_SUPERUSER_PASSWORD: testpassword123

jobs:
  backend-tests:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: cortex_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-xdist pytest-asyncio pytest-cov
    
    - name: Wait for services
      run: |
        until pg_isready -h localhost -p 5432; do sleep 1; done
        until redis-cli -h localhost -p 6379 ping; do sleep 1; done
    
    - name: Run database migrations
      working-directory: ./backend
      run: |
        alembic upgrade head
    
    - name: Run widget data executor tests
      working-directory: ./backend
      run: |
        pytest app/tests/services/test_widget_data_executor.py -v --cov=app.services.widget_data_executor --cov-report=xml:coverage-widget-executor.xml
    
    - name: Run template management tests
      working-directory: ./backend
      run: |
        pytest app/tests/services/test_template_management.py -v --cov=app.services --cov-append --cov-report=xml:coverage-template-mgmt.xml
    
    - name: Run data adapters tests
      working-directory: ./backend
      run: |
        pytest app/tests/services/test_data_adapters.py -v --cov=app.services.data_adapters --cov-append --cov-report=xml:coverage-data-adapters.xml
    
    - name: Run export service tests
      working-directory: ./backend
      run: |
        pytest app/tests/services/test_export_service.py -v --cov=app.services.export_service --cov-append --cov-report=xml:coverage-export-service.xml
    
    - name: Run widget API tests
      working-directory: ./backend
      run: |
        pytest app/tests/api/test_widget_endpoints.py -v --cov=app.api.v1.endpoints.widgets --cov-append --cov-report=xml:coverage-widget-api.xml
    
    - name: Upload backend coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage-*.xml
        flags: backend,widgets
        name: backend-widget-coverage

  frontend-tests:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install dependencies
      working-directory: ./frontend
      run: npm ci
    
    - name: Run widget component tests
      working-directory: ./frontend
      run: |
        npm test -- src/__tests__/components/widgets/widget-components.test.tsx --coverage --watchAll=false
    
    - name: Run dashboard viewer tests
      working-directory: ./frontend
      run: |
        npm test -- src/__tests__/components/widgets/dashboard-viewer.test.tsx --coverage --watchAll=false
    
    - name: Run export manager tests
      working-directory: ./frontend
      run: |
        npm test -- src/__tests__/components/widgets/export-manager.test.tsx --coverage --watchAll=false
    
    - name: Run configuration UI tests
      working-directory: ./frontend
      run: |
        npm test -- src/__tests__/components/widgets/configuration-ui.test.tsx --coverage --watchAll=false
    
    - name: Run all widget tests with coverage
      working-directory: ./frontend
      run: |
        npm run test:coverage -- src/__tests__/components/widgets/ --watchAll=false
    
    - name: Upload frontend coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./frontend/coverage/lcov.info
        flags: frontend,widgets
        name: frontend-widget-coverage

  integration-tests:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: cortex_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install backend dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-xdist pytest-asyncio
    
    - name: Wait for services
      run: |
        until pg_isready -h localhost -p 5432; do sleep 1; done
        until redis-cli -h localhost -p 6379 ping; do sleep 1; done
    
    - name: Run database migrations
      working-directory: ./backend
      run: |
        alembic upgrade head
    
    - name: Run end-to-end dashboard flow tests
      working-directory: ./
      run: |
        pytest tests/integration/test_end_to_end_dashboard_flow.py -v -m integration --tb=short
    
    - name: Run data pipeline integration tests
      working-directory: ./
      run: |
        pytest tests/integration/ -v -m integration -k "data_pipeline" --tb=short

  performance-tests:
    runs-on: ubuntu-latest
    needs: [backend-tests]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: cortex_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-benchmark pytest-asyncio psutil
    
    - name: Wait for services
      run: |
        until pg_isready -h localhost -p 5432; do sleep 1; done
        until redis-cli -h localhost -p 6379 ping; do sleep 1; done
    
    - name: Run database migrations
      working-directory: ./backend
      run: |
        alembic upgrade head
    
    - name: Run widget performance tests
      working-directory: ./
      run: |
        pytest tests/performance/test_widget_load_times.py -v -m performance --benchmark-only --benchmark-json=benchmark-results.json
    
    - name: Upload performance results
      uses: actions/upload-artifact@v3
      with:
        name: performance-results
        path: benchmark-results.json

  security-tests:
    runs-on: ubuntu-latest
    needs: [backend-tests]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install security testing tools
      run: |
        pip install bandit safety semgrep
    
    - name: Run Bandit security linting
      working-directory: ./backend
      run: |
        bandit -r app/ -f json -o bandit-report.json || true
    
    - name: Run Safety dependency check
      working-directory: ./backend
      run: |
        safety check --json --output safety-report.json || true
    
    - name: Run Semgrep security analysis
      run: |
        semgrep --config=auto --json --output=semgrep-report.json backend/app/ || true
    
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          backend/bandit-report.json
          backend/safety-report.json
          semgrep-report.json

  widget-system-validation:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, integration-tests]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Validate widget system completeness
      run: |
        echo "Validating widget system implementation..."
        
        # Check that all required widget components exist
        required_backend_files=(
          "backend/app/services/widget_data_executor.py"
          "backend/app/services/export_service.py"
          "backend/app/api/v1/endpoints/widgets.py"
          "backend/app/models/widget.py"
        )
        
        required_frontend_files=(
          "frontend/src/components/widgets/widget-renderer.tsx"
          "frontend/src/components/widgets/dashboard-viewer.tsx"
          "frontend/src/components/widgets/export-manager.tsx"
          "frontend/src/components/widgets/metric-card.tsx"
          "frontend/src/components/widgets/bar-chart.tsx"
          "frontend/src/components/widgets/data-table.tsx"
        )
        
        required_test_files=(
          "backend/app/tests/services/test_widget_data_executor.py"
          "backend/app/tests/services/test_export_service.py"
          "backend/app/tests/api/test_widget_endpoints.py"
          "frontend/src/__tests__/components/widgets/widget-components.test.tsx"
          "frontend/src/__tests__/components/widgets/dashboard-viewer.test.tsx"
          "tests/integration/test_end_to_end_dashboard_flow.py"
        )
        
        missing_files=()
        
        for file in "${required_backend_files[@]}" "${required_frontend_files[@]}" "${required_test_files[@]}"; do
          if [[ ! -f "$file" ]]; then
            missing_files+=("$file")
          fi
        done
        
        if [[ ${#missing_files[@]} -gt 0 ]]; then
          echo "Missing required files:"
          printf '%s\n' "${missing_files[@]}"
          exit 1
        fi
        
        echo "All required widget system files are present."
    
    - name: Generate test coverage report
      run: |
        echo "# Widget System Test Coverage Report" > widget-coverage-report.md
        echo "" >> widget-coverage-report.md
        echo "## Backend Coverage" >> widget-coverage-report.md
        echo "- Widget Data Executor: Covered by test_widget_data_executor.py" >> widget-coverage-report.md
        echo "- Template Management: Covered by test_template_management.py" >> widget-coverage-report.md
        echo "- Data Adapters: Covered by test_data_adapters.py" >> widget-coverage-report.md
        echo "- Export Service: Covered by test_export_service.py" >> widget-coverage-report.md
        echo "- Widget API: Covered by test_widget_endpoints.py" >> widget-coverage-report.md
        echo "" >> widget-coverage-report.md
        echo "## Frontend Coverage" >> widget-coverage-report.md
        echo "- Widget Components: Covered by widget-components.test.tsx" >> widget-coverage-report.md
        echo "- Dashboard Viewer: Covered by dashboard-viewer.test.tsx" >> widget-coverage-report.md
        echo "- Export Manager: Covered by export-manager.test.tsx" >> widget-coverage-report.md
        echo "- Configuration UI: Covered by configuration-ui.test.tsx" >> widget-coverage-report.md
        echo "" >> widget-coverage-report.md
        echo "## Integration Coverage" >> widget-coverage-report.md
        echo "- End-to-End Flow: Covered by test_end_to_end_dashboard_flow.py" >> widget-coverage-report.md
        echo "- Performance: Covered by test_widget_load_times.py" >> widget-coverage-report.md
    
    - name: Upload coverage report
      uses: actions/upload-artifact@v3
      with:
        name: widget-coverage-report
        path: widget-coverage-report.md

  notify-completion:
    runs-on: ubuntu-latest
    needs: [widget-system-validation]
    if: always()
    
    steps:
    - name: Notify test completion
      run: |
        if [[ "${{ needs.widget-system-validation.result }}" == "success" ]]; then
          echo "✅ Widget system testing completed successfully!"
          echo "All components have been tested:"
          echo "- Backend services and APIs"
          echo "- Frontend components and UI"
          echo "- Integration workflows"
          echo "- Performance benchmarks"
          echo "- Security validation"
        else
          echo "❌ Widget system testing failed!"
          echo "Check the workflow logs for details."
          exit 1
        fi