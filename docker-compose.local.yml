# ABOUTME: Simplified Docker Compose for local development and testing
# ABOUTME: Includes PostgreSQL, Redis, and optional services for the Clinical Dashboard

version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: changethis
      POSTGRES_DB: clinical_dashboard
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for Celery
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Adminer - Database UI (Optional)
  adminer:
    image: adminer
    restart: always
    ports:
      - "8080:8080"
    depends_on:
      - postgres
    environment:
      - ADMINER_DESIGN=pepa-linha-dark

  # Flower - Celery Monitoring UI (Optional)
  flower:
    image: mher/flower:2.0
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - FLOWER_PORT=5555
    ports:
      - "5555:5555"
    depends_on:
      - redis

  # Backend - FastAPI Application
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: cortex_dash-backend-1
    ports:
      - "8000:8000"
    environment:
      - PROJECT_NAME=Cortex Clinical Dashboard
      - BACKEND_CORS_ORIGINS=["http://localhost:3000","http://localhost:3001","http://127.0.0.1:3000"]
      - FRONTEND_HOST=http://localhost:3000
      - POSTGRES_SERVER=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=changethis
      - POSTGRES_DB=clinical_dashboard
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=your-secret-key-here-change-in-production
      - FIRST_SUPERUSER=admin@sagarmatha.ai
      - FIRST_SUPERUSER_PASSWORD=adadad123
    volumes:
      - ./backend:/app
      - ./data:/data
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: sh -c "alembic upgrade head && python app/initial_data.py && uvicorn app.main:app --reload --host 0.0.0.0 --port 8000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/utils/health-check/"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Frontend - Next.js Application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: cortex_dash-frontend-1
    ports:
      - "3000:3000"
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8000/api/v1
      - NEXTAUTH_URL=http://localhost:3000
      - NEXTAUTH_SECRET=your-secret-key-here-change-in-production
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    depends_on:
      backend:
        condition: service_healthy
    command: npm run dev

  # Celery Worker
  celery-worker:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: cortex_dash-celery-worker-1
    environment:
      - PROJECT_NAME=Cortex Clinical Dashboard
      - POSTGRES_SERVER=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=changethis
      - POSTGRES_DB=clinical_dashboard
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=your-secret-key-here-change-in-production
    volumes:
      - ./backend:/app
      - ./data:/data
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: celery -A app.core.celery_app worker --loglevel=info

  # Celery Beat
  celery-beat:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: cortex_dash-celery-beat-1
    environment:
      - PROJECT_NAME=Cortex Clinical Dashboard
      - POSTGRES_SERVER=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=changethis
      - POSTGRES_DB=clinical_dashboard
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=your-secret-key-here-change-in-production
    volumes:
      - ./backend:/app
      - ./data:/data
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: celery -A app.core.celery_app beat --loglevel=info

volumes:
  postgres_data:

# To run the full stack locally:
# 1. Start the services: docker-compose -f docker-compose.local.yml up -d
# 2. In your backend directory:
#    - Create virtual environment: python3 -m venv venv
#    - Activate it: source venv/bin/activate
#    - Install dependencies: pip install -r requirements.txt
#    - Run migrations: alembic upgrade head
#    - Start FastAPI: uvicorn app.main:app --reload --host 0.0.0.0 --port 8000
#    - (Optional) Start Celery Worker: celery -A app.core.celery_app worker --loglevel=info
#    - (Optional) Start Celery Beat: celery -A app.core.celery_app beat --loglevel=info
# 3. In your frontend directory:
#    - Install dependencies: npm install
#    - Start Next.js: npm run dev
#
# Or simply run: make restart-all
#
# Access points:
# - Frontend: http://localhost:3000
# - API: http://localhost:8000
# - API Docs: http://localhost:8000/docs
# - Adminer (DB UI): http://localhost:8080
# - Flower (Celery UI): http://localhost:5555