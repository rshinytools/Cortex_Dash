# ABOUTME: Production Docker Compose configuration for VM deployment
# ABOUTME: Complete stack with Nginx, SSL, and production optimizations

version: '3.8'

services:
  # Nginx Reverse Proxy with SSL
  nginx:
    image: nginx:alpine
    container_name: cortex_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/sites-enabled:/etc/nginx/sites-enabled:ro
      - ./certbot/conf:/etc/letsencrypt:ro
      - ./certbot/www:/var/www/certbot:ro
      - static_volume:/app/static
    depends_on:
      - backend
      - frontend
    restart: unless-stopped
    networks:
      - cortex_network

  # SSL Certificate Management
  certbot:
    image: certbot/certbot
    container_name: cortex_certbot
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
    restart: unless-stopped
    networks:
      - cortex_network

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: cortex_postgres
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB:-clinical_dashboard}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups/postgres:/backups
    ports:
      - "127.0.0.1:5432:5432"  # Only bind to localhost
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - cortex_network

  # Redis Cache and Message Broker
  redis:
    image: redis:7-alpine
    container_name: cortex_redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    ports:
      - "127.0.0.1:6379:6379"  # Only bind to localhost
    healthcheck:
      test: ["CMD", "redis-cli", "--auth", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - cortex_network

  # Backend - FastAPI Application
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    image: cortex_backend:prod
    container_name: cortex_backend
    expose:
      - "8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - ENVIRONMENT=production
      - PROJECT_NAME=Cortex Clinical Dashboard
      - BACKEND_CORS_ORIGINS=${BACKEND_CORS_ORIGINS:-https://dashboard.sagarmatha.ai}
      - FRONTEND_HOST=${FRONTEND_HOST:-https://dashboard.sagarmatha.ai}
      
      # Database
      - POSTGRES_SERVER=postgres
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB:-clinical_dashboard}
      
      # Redis
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_DB=0
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      
      # Celery
      - CELERY_BROKER_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - CELERY_RESULT_BACKEND=redis://:${REDIS_PASSWORD}@redis:6379/0
      
      # Security
      - SECRET_KEY=${SECRET_KEY}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
      - FIRST_SUPERUSER=${FIRST_SUPERUSER:-admin@sagarmatha.ai}
      - FIRST_SUPERUSER_PASSWORD=${FIRST_SUPERUSER_PASSWORD}
      
      # Email (uses database configuration)
      - EMAILS_FROM_EMAIL=${EMAILS_FROM_EMAIL:-noreply@sagarmatha.ai}
      
      # Data
      - DATA_PATH=/data
      
      # Performance
      - WEB_CONCURRENCY=${WEB_CONCURRENCY:-4}
      - MAX_WORKERS=${MAX_WORKERS:-4}
    volumes:
      - ./data:/data
      - static_volume:/app/static
      - ./logs/backend:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/utils/health-check/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - cortex_network

  # Frontend - Next.js Application (Production Build)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
      args:
        - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL:-https://dashboard.sagarmatha.ai/api}
    image: cortex_frontend:prod
    container_name: cortex_frontend
    expose:
      - "3000"
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL:-https://dashboard.sagarmatha.ai/api}
      - NEXTAUTH_URL=${NEXTAUTH_URL:-https://dashboard.sagarmatha.ai}
      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET}
      - API_URL_INTERNAL=http://backend:8000
    depends_on:
      backend:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - cortex_network

  # Celery Worker
  celery-worker:
    image: cortex_backend:prod
    container_name: cortex_celery_worker
    command: ["celery", "-A", "app.core.celery_app", "worker", "--loglevel=info", "--concurrency=2"]
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - ENVIRONMENT=production
      - PROJECT_NAME=Cortex Clinical Dashboard
      - POSTGRES_SERVER=postgres
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB:-clinical_dashboard}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_DB=0
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - CELERY_BROKER_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - CELERY_RESULT_BACKEND=redis://:${REDIS_PASSWORD}@redis:6379/0
      - SECRET_KEY=${SECRET_KEY}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
      - DATA_PATH=/data
    volumes:
      - ./data:/data
      - ./logs/celery:/app/logs
    restart: unless-stopped
    networks:
      - cortex_network

  # Celery Beat Scheduler
  celery-beat:
    image: cortex_backend:prod
    container_name: cortex_celery_beat
    command: ["celery", "-A", "app.core.celery_app", "beat", "--loglevel=info"]
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - ENVIRONMENT=production
      - PROJECT_NAME=Cortex Clinical Dashboard
      - POSTGRES_SERVER=postgres
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB:-clinical_dashboard}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_DB=0
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - CELERY_BROKER_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - CELERY_RESULT_BACKEND=redis://:${REDIS_PASSWORD}@redis:6379/0
      - SECRET_KEY=${SECRET_KEY}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
    volumes:
      - ./logs/celery-beat:/app/logs
    restart: unless-stopped
    networks:
      - cortex_network

  # Flower - Celery Monitoring (Optional - remove in production if not needed)
  flower:
    image: cortex_backend:prod
    container_name: cortex_flower
    command: ["celery", "-A", "app.core.celery_app", "flower", "--port=5555", "--basic-auth=${FLOWER_USER:-admin}:${FLOWER_PASSWORD}"]
    ports:
      - "127.0.0.1:5555:5555"  # Only bind to localhost
    depends_on:
      redis:
        condition: service_healthy
    environment:
      - CELERY_BROKER_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - CELERY_RESULT_BACKEND=redis://:${REDIS_PASSWORD}@redis:6379/0
      - FLOWER_BASIC_AUTH=${FLOWER_USER:-admin}:${FLOWER_PASSWORD}
    restart: unless-stopped
    networks:
      - cortex_network

  # Backup Service (runs daily)
  backup:
    image: postgres:15-alpine
    container_name: cortex_backup
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB:-clinical_dashboard}
    volumes:
      - ./backups:/backups
      - ./scripts/backup.sh:/backup.sh:ro
    entrypoint: ["/bin/sh", "-c", "while true; do /backup.sh; sleep 86400; done"]
    depends_on:
      - postgres
    restart: unless-stopped
    networks:
      - cortex_network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  static_volume:
    driver: local

networks:
  cortex_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16